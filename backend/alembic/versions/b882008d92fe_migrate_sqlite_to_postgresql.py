"""migrate_sqlite_to_postgresql

Revision ID: b882008d92fe
Revises: 2c839e7ddaa5
Create Date: 2025-05-17 14:49:51.397173

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = 'b882008d92fe'
down_revision: Union[str, None] = '2c839e7ddaa5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('export_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='exportstatus'), nullable=False),
    sa.Column('progress', sa.Float(), nullable=False),
    sa.Column('format', sa.Enum('JSON', 'JSONL', 'CSV', 'EXCEL', name='exportformat'), nullable=False),
    sa.Column('file_path', sa.String(length=255), nullable=True),
    sa.Column('error_message', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_export_tasks_id'), 'export_tasks', ['id'], unique=False)
    op.add_column('annotations', sa.Column('annotator_id', sa.Integer(), nullable=False))
    op.add_column('annotations', sa.Column('reviewer_id', sa.Integer(), nullable=True))
    op.add_column('annotations', sa.Column('annotation_type', sa.Enum('TEXT', 'IMAGE', 'AUDIO', 'VIDEO', name='annotationtype'), nullable=False))
    op.add_column('annotations', sa.Column('content', sa.JSON(), nullable=False))
    op.add_column('annotations', sa.Column('conflict_with', sa.Integer(), nullable=True))
    op.alter_column('annotations', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint(None, 'annotations', type_='foreignkey')
    op.create_foreign_key(None, 'annotations', 'users', ['annotator_id'], ['id'])
    op.create_foreign_key(None, 'annotations', 'users', ['reviewer_id'], ['id'])
    op.create_foreign_key(None, 'annotations', 'annotations', ['conflict_with'], ['id'])
    op.drop_column('annotations', 'user_id')
    op.drop_column('annotations', 'data')
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'updated_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('updated_at', sa.DATETIME(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.alter_column('users', 'is_superuser',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.add_column('annotations', sa.Column('data', sqlite.JSON(), nullable=False))
    op.add_column('annotations', sa.Column('user_id', sa.INTEGER(), nullable=False))
    op.drop_constraint(None, 'annotations', type_='foreignkey')
    op.drop_constraint(None, 'annotations', type_='foreignkey')
    op.drop_constraint(None, 'annotations', type_='foreignkey')
    op.create_foreign_key(None, 'annotations', 'users', ['user_id'], ['id'])
    op.alter_column('annotations', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('annotations', 'conflict_with')
    op.drop_column('annotations', 'content')
    op.drop_column('annotations', 'annotation_type')
    op.drop_column('annotations', 'reviewer_id')
    op.drop_column('annotations', 'annotator_id')
    op.drop_index(op.f('ix_export_tasks_id'), table_name='export_tasks')
    op.drop_table('export_tasks')
    # ### end Alembic commands ###
