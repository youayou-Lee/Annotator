---
description: 
globs: 
alwaysApply: true
---
# 文档标注系统技术栈限制规则

## 前端技术栈

### 核心框架与库
- React 18
- TypeScript
- React Router v6
- Zustand (状态管理)
- React Query (数据获取与缓存)
- Ant Design v5 (UI组件库)
- Vite (构建工具)

### 样式处理
- SCSS/SASS
- CSS Modules

### 测试框架
- Vitest
- React Testing Library
- jsdom (测试环境)

### 代码规范
- ESLint
- Prettier
- TypeScript严格模式

### 其他前端库
- Axios (HTTP客户端)
- dayjs (日期处理)
- Monaco Editor (代码编辑器)

## 后端技术栈

### 核心框架与工具
- Python 3.8+
- FastAPI
- SQLAlchemy (ORM)
- Alembic (数据库迁移)
- Pydantic (数据验证)

### 数据库
- PostgreSQL

### 开发工具
- Black (代码格式化)
- Pylint (代码检查)
- Flake8 (代码检查)
- MyPy (类型检查)
- Pytest (测试框架)

## 约束规则

1. **前端开发约束**
   - 使用函数组件和React Hooks，不使用类组件
   - 使用TypeScript类型定义，禁止使用any类型（特殊情况除外）
   - 使用Zustand进行状态管理，不引入其他状态管理库
   - 使用React Router v6的hooks API进行路由管理
   - 使用Ant Design组件，保持UI一致性
   - 测试使用React Testing Library，不使用Enzyme

2. **后端开发约束**
   - 使用FastAPI路由和依赖注入系统
   - 使用Pydantic模型进行数据验证
   - 使用SQLAlchemy ORM进行数据库操作，不直接使用SQL
   - 使用Alembic进行数据库迁移管理
   - 使用Pytest进行测试，确保测试覆盖率

3. **代码风格约束**
   - 前端：使用ESLint和Prettier配置的代码风格
   - 后端：使用Black格式化，遵循PEP 8规范
   - 提交前必须通过代码检查和类型检查

4. **第三方库限制**
   - 禁止引入未在此技术栈中列出的主要框架或库
   - 如需引入新的依赖，必须经过评审并更新此规则文档
   - 优先使用项目已有的库和工具解决问题

5. **测试规范约束**
   - 前端测试使用Vitest和React Testing Library
   - 后端测试使用Pytest
   - 组件测试应避免对实现细节进行测试，专注于用户行为
   - 功能测试应覆盖关键业务流程

